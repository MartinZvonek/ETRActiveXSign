using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.InteropServices;
using System.Security.Cryptography.X509Certificates;
using SBHTTPTSPClient;
using ETRActiveXSign.formulare;
using System.Windows.Forms;
using System.Reflection;
using System.Diagnostics;
using SBX509;
using SBPDF;
using SBHTTPSClient;
using System.IO;
using SBPDFSecurity;
using SBCustomCertStorage;
using SBRDN;

namespace ETRActiveXSign
{
	[ProgId("ETRActiveXSign.ETRPDFSigner")]
	[ClassInterface(ClassInterfaceType.AutoDual)]
	[Guid("C37C51A1-916E-4AFE-A212-C52750214A4F")]
	[ComVisible(true)]    

	public class ETRPDFSigner
	{
		[ComVisible(true)]

		public string _PdfFile = "";
		private byte[] pdffile = null;
		public string StatusKod = "0000";
		public string StatusText = "";

		public string _Reason = "";
		public string _Location = "";

		//public bool TimeStamp = false;
		public string _InVisible = "A";
		public string _VisibleSide = "LS"; //LH: levý horní; LS: levý spodní; PH: pravý horní; PS: pravý spodní

		public string _Storage = "";  //B - bez, F - FileSystem, W - Windows Store, T - Token
		public string _Cer_Ser_Number = "";  //Seriove èislo certifikatu, použije se pro podpis, musím ale kontrolovat jeho platnost
		public string _Cer_PFX_path = "";  //Cesta k ulozisti v pripade, že jsem ji nadefinoval

		public string _AddTimeStamp = "N";
		public string _TSProxyURL = "";   //https://mid-tsa.disig.sk/cmtsa
		public string _TSA_User = "";   //authtoken0801
		public string _TSA_Pass = "";   //eughahr7meiphiF
		public string _Sig_Page = "F"; //F-prvni, L-posledni, S - konkretni_strana
		public string _Sig_Page_By_User = ""; //F-prvni, L-posledni, S - konkretni_strana

		public string _odsazeni_leve = "";
		public string _odsazeni_prave = "";
		public string _odsazeni_spodni = "";
		public string _odsazeni_horni = "";

		public string _podklad = "";

		public bool ShowErrorMessages = false;
		public string LastError = "";
		public string Ret_jmeno = "";
		public string Ret_RDM = "";
		public string Ret_Serial_Number = "";
		public string Ret_Serial_Number_RDM = "";
		public string Ret_Sig_DateTime = "";

		private string obrazek_etr = "";
		private TElHTTPTSPClient httpTspClient = new TElHTTPTSPClient();

		[ComVisible(true)]
		public string UkazForm() {

			token_list_form f_podpis = new token_list_form();
			 f_podpis.ShowDialog();

			 if (f_podpis.DialogResult == DialogResult.OK)
			 {
				 //MessageBox.Show(f_podpis.cert_heslo);
			 }
			 
			 return "OK";
			 
			/*
			podpis_form f_podpis = new podpis_form();
			f_podpis.ShowDialog();

			if (f_podpis.DialogResult == DialogResult.OK)
			{
				//ext_X509Certificate2 = f_podpis.ext_certificate;
				return "OK";
			}
			else
			{
				LastError = "Nebyl vybrán certifikát k podpisu !";
				return LastError;
			} */ 
		}


		[ComVisible(true)]
		public string GetVersion()
		{
			Assembly asm = Assembly.GetExecutingAssembly();
			FileVersionInfo fvi = FileVersionInfo.GetVersionInfo(asm.Location);

			StatusKod = "0000";
			StatusText = "--";

			return String.Format("{0}.{1}.{2}", fvi.FileMajorPart, fvi.FileMinorPart, fvi.FilePrivatePart);
		}

		//[ComVisible(true)]
		public string GetText()
		{
			return "Hello ActiveX World!";
		}

		[ComVisible(true)]
		public string PDFSave()
		{
			return "";
		}


		[ComVisible(true)]
		public string PDFLoad(byte[] inData)
		{
			return "";
		}

		[ComVisible(true)]
		public int Sign()
		{
			SBUtils.Unit.SetLicenseKey("5E1C594FD406A87D1AD78BD5FCEA6FEEE38E810EB2FBDBC0D2256E9DBAD4D41776F64EF9252CBB192C73CDDB50C9E16E77D0635DC51244BFECC4F1A8539AE70505B7C95FE34A43CCBA155DA8730346C7154F294051EDFBE3F83637A09981F7D82F3F37FFF4AE8C89640094BE8BCCE8CE98966FAC32130DF51ED9AA38EE29EDCEC2F81866424B90656003B0532F65CB2C88A99F4EA7252A57CAF018913C3452963ECE32020D1BF1EFBDE1B16FA6BA0DAF3D0536ABBC24F9C95E4AF8FE300CF2B3F32EC767279CC091ECDC4B7E4A7D7AFAE9164C1117A9FAC8A4307D36C9A1552FD47247B429B6C1AB5E0291B60FAAFEBC2E79A392537A8CD408664CAC20D8F5D3");
			//volám metodu .Sign()

			//1. vybrat dokument

			TElPDFDocument PDFdocument = new TElPDFDocument();
			TElX509Certificate cert = new TElX509Certificate();
			

			bool Success = false;


			if (_PdfFile == "")
			{
				LastError = "Nejsou naètena base64 data !";
				return 1;
			}

			try
			{
				pdffile = Convert.FromBase64String(_PdfFile);				
			}
			catch (Exception fdsf)
			{
				LastError = "Chyba pøi sestavení BASE64[] dat (" + fdsf.Message + ") !";
				return 1;
			}            			

			if (_Reason == "")
			{
				_Reason = "Za správnost vyhotovení";
			}

			if (_Location == "")
			{
				_Location = "ETR";
			}

			//na základì volby v etr mohu volat jednotlivá okna

			//2. vybrat certifikát
			podpis_form f_podpis = new podpis_form();
			f_podpis.ShowDialog();

			if (f_podpis.DialogResult == DialogResult.OK)
			{
				cert = f_podpis.tei_certificate;
				//return "OK";
			}
			else
			{
				LastError = "Nebyl vybrán certifikát k podpisu !";
				return 1;
			}
			
			//3. zkontrolovat TSA
			if (_AddTimeStamp == "A")
			{
				if (_TSProxyURL == "")
				{
					LastError = "Je povoleno pøidání èasového razítka (TSA), ale není zadána URL adresa serveru pro TSA !";
					return 31;
				}

				if (_TSA_User == "")
				{
					LastError = "Je povoleno pøidání èasového razítka (TSA), ale není zadáno uživatelské jméno pro pøihlášení k serveru TSA !";
					return 32;
				}

				if (_TSA_Pass == "")
				{
					LastError = "Je povoleno pøidání èasového razítka (TSA), ale není zadáno heslo pro pøihlášení k serveru TSA !";
					return 33;
				}
			}

			TName cert_info = cert.SubjectName;

			Ret_Serial_Number = SBUtils.Unit.BinaryToString(cert.SerialNumber);
			Ret_Serial_Number_RDM = GetSerNumByRDM(cert.SubjectRDN);

			
			if (_AddTimeStamp == "A")
			{
				httpTspClient.URL = _TSProxyURL;
				httpTspClient.HTTPClient = new TElHTTPSClient();
				httpTspClient.HTTPClient.RequestParameters = new TElHTTPRequestParams();
				httpTspClient.HTTPClient.RequestParameters.Username = _TSA_User;
				httpTspClient.HTTPClient.RequestParameters.Password = _TSA_Pass;
				httpTspClient.HTTPClient.UseHTTPProxy = false;
				httpTspClient.HTTPClient.SSLEnabled = true;

				httpTspClient.HashAlgorithm = SBConstants.Unit.SB_ALGORITHM_DGST_SHA512;

				httpTspClient.HTTPClient.OnCertificateValidate += CertificateValidate;

				//httpTspClient.

			}

			Stream fileStream = null;

			try
			{
				fileStream = new MemoryStream(pdffile.Length + 1024);
				fileStream.Write(pdffile, 0, pdffile.Length);
			}
			catch (Exception cc)
			{
				LastError = "Chyba pøi pøevodu byte[] na MemoryStream ! [" + cc.Message + "]";
				return 6;
			}

			//4. podepsat
			TElPDFPublicKeySecurityHandler handler = new TElPDFPublicKeySecurityHandler();
			TElMemoryCertStorage storage = new TElMemoryCertStorage();
			storage.Add(cert, true);

			try
			{
				PDFdocument.Open(fileStream);
				
				int pdf_pocet_stran = 0;
				int page_width = 0;
				int page_height = 0;

				pdf_pocet_stran = PDFdocument.PageInfoCount;
				int sigIndex = PDFdocument.AddSignature();

				TElPDFSignature sig = PDFdocument.get_Signatures(sigIndex);

				sig.Handler = handler;
				handler.CertStorage = storage;
				handler.SignatureType = SBPDFSecurity.TSBPDFPublicKeySignatureType.pstPKCS7SHA1;
				handler.CustomName = "Adobe.PPKMS";
				
				sig.SignatureType = SBPDF.Unit.stDocument;
				sig.AuthorName = cert_info.CommonName;
				sig.SigningTime = DateTime.UtcNow;
								

				if (_AddTimeStamp == "A")
				{
					handler.TSPClient = httpTspClient;
				}


				Ret_Sig_DateTime = sig.SigningTime.ToString("yyyy-MM-ddTHH:mm:ss");

				sig.Reason = _Reason;
				
				if (_InVisible == "N")
				{
					int _sirka_ramecku_spodni = 27;
					int _sirka_ramecku_horni = 27;
					int _sirka_ramecku_leva = 54;
					int _sirka_ramecku_prava = 27;

					//nactu sirku ramecku
					
					if (_odsazeni_leve != "")
					{
						try
						{
							_sirka_ramecku_leva = Convert.ToInt32(_odsazeni_leve);
						}
						catch (Exception) { }
					}

					if (_odsazeni_prave != "")
					{
						try
						{
							_sirka_ramecku_prava = Convert.ToInt32(_odsazeni_prave);
						}
						catch (Exception) { }
					}

					if (_odsazeni_spodni != "")
					{
						try
						{
							_sirka_ramecku_spodni = Convert.ToInt32(_odsazeni_spodni);
						}
						catch (Exception) { }
					}

					if (_odsazeni_horni != "")
					{
						try
						{
							_sirka_ramecku_horni = Convert.ToInt32(_odsazeni_horni);
						}
						catch (Exception){ }
					}                    

					sig.WidgetProps.BackgroundStyle = TSBPDFWidgetBackgroundStyle.pbsCustom;
					sig.WidgetProps.AutoPos = false;
					sig.WidgetProps.AutoSize = false;
                    					
					int podpis_na_stranu = 0;
					int podpis_na_stranu_by_user = 0;

					if (_Sig_Page == "S")
					{
						if (_Sig_Page_By_User != "")
						{
							try
							{
								podpis_na_stranu_by_user = Convert.ToInt32(_Sig_Page_By_User);
							}
							catch (Exception)
							{	throw;	}
							
						}

						if (podpis_na_stranu_by_user > PDFdocument.PageInfoCount)
						{
							podpis_na_stranu_by_user = 0;
						}
					}

					switch (_Sig_Page)
					{
						case "F":
							sig.Page = 0;
							podpis_na_stranu = 0;

							break;
						case "L":
							sig.Page = PDFdocument.PageInfoCount;
							podpis_na_stranu = PDFdocument.PageInfoCount - 1;

							break;
						case "S":
							sig.Page = podpis_na_stranu_by_user;
							if (podpis_na_stranu_by_user == 0)
							{
								podpis_na_stranu = 0;
							}
							else {
								podpis_na_stranu = podpis_na_stranu_by_user - 1;
							}
                            break;
						default:
							sig.Page = 0;
							break;
					}

					TElPDFPageInfo info_pdf = PDFdocument.get_PageInfos(podpis_na_stranu);
					page_width = info_pdf.Width;
					page_height = info_pdf.Height;
					
					switch (_VisibleSide)
					{
						case "LH":
							sig.WidgetProps.OffsetX = _sirka_ramecku_leva;
							sig.WidgetProps.OffsetY = page_height - 60 - _sirka_ramecku_horni;
							break;
						case "LS":
							sig.WidgetProps.OffsetX = _sirka_ramecku_leva;
							sig.WidgetProps.OffsetY = _sirka_ramecku_spodni;
							break;
						case "PH":
							sig.WidgetProps.OffsetX = page_width - 150 - _sirka_ramecku_prava;
							sig.WidgetProps.OffsetY = page_height - 60 - _sirka_ramecku_horni;
							break;
						case "PS":
							sig.WidgetProps.OffsetX = page_width - 150- _sirka_ramecku_prava;
							sig.WidgetProps.OffsetY = _sirka_ramecku_spodni;
							break;
						default:
							sig.WidgetProps.OffsetX = _sirka_ramecku_leva;
							sig.WidgetProps.OffsetY = _sirka_ramecku_spodni;
							break;
					}
											
					sig.WidgetProps.Width = 150;
					sig.WidgetProps.Height = 60;

					sig.WidgetProps.Background.ImageType= TSBPDFImageType.pitJPEG2000;
					sig.WidgetProps.Background.Height = 197;
					sig.WidgetProps.Background.Width = 240;
					sig.WidgetProps.StretchX = 150;
					sig.WidgetProps.StretchY = 60;
					sig.WidgetProps.Background.Data = Convert.FromBase64String(obrazek_etr);

					if (_podklad == "N")
					{
						sig.WidgetProps.BackgroundStyle = TSBPDFWidgetBackgroundStyle.pbsNoBackground;
					}

					sig.WidgetProps.AutoStretchBackground = false;
					sig.WidgetProps.SectionTextFontSize = 4;
					sig.WidgetProps.SectionTitleFontSize = 5;
					sig.WidgetProps.TitleFontSize = 8;

					sig.WidgetProps.SignerCaption = "Digitálnì podepsal: ";

					sig.WidgetProps.Header = cert_info.CommonName;

					sig.WidgetProps.AlgorithmCaption = "";
					sig.WidgetProps.SignerInfo = sestav_dolozku(cert_info, "");
					
					sig.WidgetProps.AlgorithmInfo = "";
					sig.WidgetProps.AutoText = false;
						
					sig.WidgetProps.AutoFontSize = false;
					sig.WidgetProps.HideDefaultText = false;
					sig.WidgetProps.TimestampFontSize = 6;
				}

				if (_InVisible == "A")
				{
					sig.Invisible = true;
				}
				else
				{
					sig.Invisible = false;
				}

                Ret_jmeno = cert_info.CommonName;
                Ret_RDM = RDNToString(cert.SubjectRDN);

                Success = true;

			}
			catch (Exception ex)
			{
				LastError = "Chyba pøi podepisování dokumentu ! [" + ex.Message + "]";
				return 6;
			}
			finally
			{
				PDFdocument.Close(Success);
			}
			
			_PdfFile = null;

			if (Success)
			{ 
				try
				{
					pdffile = ((MemoryStream)fileStream).ToArray();
					_PdfFile = Convert.ToBase64String(pdffile);
				}
				catch (Exception ccc1)
				{
					LastError = "Chyba pøi pøevodu MemoryStream na byte[] ! [" + ccc1.Message + "]";
					return 7;
				}
			}
			return 0;
		}

		private string GetSerNumByRDM(TElRelativeDistinguishedName Rdn)
		{
			string mlist = "";

			for (int i = 0; i < Rdn.Count; i++)
			{
				if (SBStrUtils.__Global.OIDToStr(Rdn.get_OIDs(i)) == "2.5.4.5")
				{
					mlist = RDNValueToString(Rdn.get_Tags(i), Rdn.get_Values(i));
					return mlist;
				}

			}

			return mlist;
		}

		private void muj_cert()
		{
			X509Store store = new X509Store(StoreName.My, StoreLocation.CurrentUser);
			store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);

			X509Certificate2Collection certificateCollection = store.Certificates.Find(X509FindType.FindBySerialNumber, "1EFD23", false);

			if (certificateCollection.Count == 0)
			{
				MessageBox.Show("nenalezen");
				return;
			}            
		}

		private void CertificateValidate(object Sender, TElX509Certificate X509Certificate, ref bool Validate)
		{
			Validate = true;
		}


		private List<string> RDNTolistString(TElRelativeDistinguishedName Rdn)
		{
			List<string> mlist = new List<string>();
			
			for (int i = 0; i < Rdn.Count; i++) {
				if (SBStrUtils.__Global.OIDToStr(Rdn.get_OIDs(i)) == "2.5.4.11") {
					mlist.Add(RDNValueToString(Rdn.get_Tags(i), Rdn.get_Values(i)));
				} 
				
			}
			return mlist;
		}

		private string RDNToString(TElRelativeDistinguishedName Rdn)
		{
			string Result = "";
			for (int i = 0; i < Rdn.Count; i++)
				Result = Result + OID_to_NormString(SBStrUtils.__Global.OIDToStr(Rdn.get_OIDs(i))) + "=" + RDNValueToString(Rdn.get_Tags(i), Rdn.get_Values(i)) + Environment.NewLine;
			if (Rdn.Count > 0)
				Result = Result.Substring(0, Result.Length - 2);
			return Result;
		}

		private string OID_to_NormString(string oid_in)
		{
			string xx_ret = "";
			switch (oid_in)
			{
				case "2.5.4.3":
					xx_ret = "cn";
					break;
				case "2.5.4.4":
					xx_ret = "sn";
					break;
				case "2.5.4.42":
					xx_ret = "givenMane";
					break;
				case "2.5.4.5":
					xx_ret = "serialNumber";
					break;
				case "2.5.4.6":
					xx_ret = "c";
					break;
				case "2.5.4.10":
					xx_ret = "o";
					break;
				case "2.5.4.11":
					xx_ret = "ou";
					break;
				case "2.5.4.12":
					xx_ret = "title";
					break;
				default:
					xx_ret = oid_in;
					break;
			}

			return xx_ret;
		}

		private string RDNValueToString(byte tag, byte[] value)
		{
			switch (tag)
			{
				case SBASN1Tree.Unit.SB_ASN1_NUMERICSTR:
				case SBASN1Tree.Unit.SB_ASN1_PRINTABLESTRING:
				case SBASN1Tree.Unit.SB_ASN1_IA5STRING:
				case SBASN1Tree.Unit.SB_ASN1_VISIBLESTRING:
					{
						return SBUtils.Unit.StringOfBytes(value);
					}
				case SBASN1Tree.Unit.SB_ASN1_UTF8STRING:
					{
						return System.Text.Encoding.UTF8.GetString(value);
					}
				case SBASN1Tree.Unit.SB_ASN1_BMPSTRING:
					{
						if ((value.Length >= 2) && (value[0] == 254) && (value[1] == 255))
							return System.Text.Encoding.BigEndianUnicode.GetString(value, 2, value.Length - 2);
						else
							if ((value.Length >= 2) && (value[0] == 255) && (value[1] == 254))
							return System.Text.Encoding.Unicode.GetString(value, 2, value.Length - 2);
						else
							return System.Text.Encoding.BigEndianUnicode.GetString(value, 0, value.Length);
					}
				case SBASN1Tree.Unit.SB_ASN1_UNIVERSALSTRING:
					{
						if ((value.Length < 4) || (value[0] != 255) || (value[1] != 254) || (value[2] != 0) || (value[3] != 0))
							SBUtils.Unit.SwapBigEndianDWords(ref value);

						string Result = System.Text.Encoding.GetEncoding("utf-32").GetString(value, 0, value.Length);
						if ((Result.Length > 0) && (Result[0] == (Char)(0xFEFF)))
							Result = Result.Remove(0, 1);
						return Result;
					}
				default:
					{
						return SBUtils.Unit.StringOfBytes(value);
					}
			}
		}

		private string sestav_dolozku(TName x_cert_info, string SerNum)
		{
			string x_out = "";

			if (x_cert_info.CommonName != "")
			{
				x_out = dopln_text(x_out, x_cert_info.CommonName);
			}

			if (x_cert_info.Country != "")
			{
				//x_out = dopln_text(x_out, "c=" + x_cert_info.Country);
			}

			if (x_cert_info.Organization != "")
			{
				//x_out = dopln_text(x_out, x_cert_info.Organization);
				x_out = dopln_text(x_out, SpliceText("Èeská republika - Krajské øeditelství policie Libereckého kraje se sídlem v Liberci [IÈ: 72050501]", 65)); 

			}

			x_out = dopln_text(x_out, "Dùvod: " + _Reason);
			//x_out = dopln_text(x_out, "serialNumber: " + SerNum);

			



			if (x_cert_info.OrganizationUnit != "")
			{
				//x_out = dopln_text(x_out, "ou=" + x_cert_info.OrganizationUnit);
			}
			

			return x_out;
		}
		
		public static string SpliceText(string text, int lineLength)
		{
			var charCount = 0;
			var lines = text.Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries)
							.GroupBy(w => (charCount += w.Length + 1) / lineLength)
							.Select(g => string.Join(" ", g));

			return String.Join(Environment.NewLine, lines.ToArray());
		}
		
		private string sestav_dolozku_RDN(List<string> rdn_to_use)
		{
			string x_out = "";
			string x_oec = "";
			if (rdn_to_use.Count > 0)
			{
				foreach (string x_item in rdn_to_use)
				{
					try
					{
						Convert.ToInt32(x_item);
						x_oec = x_item;
					}
					catch (Exception)
					{
						x_out = x_item;
					}
				}
				
			}
			else
			{
				return x_out;
			}
			
			return x_out;
		}

		private string dopln_text(string puvodni, string append)
		{
			if (puvodni == "")
			{
				puvodni = append;
			}
			else
			{
				puvodni = puvodni + Environment.NewLine + append;
			}

			return puvodni;

		}


	}
}
